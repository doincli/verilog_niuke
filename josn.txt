{
	// Place your snippets for verilog here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }


	//1 shixu
	"shixu":{
		"prefix": "shixu",
		"body": [
"always  @(posedge clk or negedge rst_n)begin"
"	if(rst_n==1'b0)begin"
"		out <= 0;"
"	end"
"	else begin"
"	end"
"end"
		],
	}


	//1 shixu_tong
	"shixu_tong":{
		"prefix": "shixu_tong",
		"body": [
"always  @(posedge clk)begin"
"	if(rst_n==1'b0)begin"
"		out <= 0;"
"	end"
"	else begin"
"	end"
"end"
		],
	}


	//1 shixu_tong
	"Generate":{
		"prefix": "Generate",
		"body": [
"	generate"
"		genvar i;"
"		for(i = 0; i <8; i=i+1)"
"			begin:assign_test//名字随便起，但是必须有"
"				assign data_out[i] = data_in[7 - i];"
"			end"
"	endgenerate"
		],
	}




	//1 pinjie
	"pinjie":{
		"prefix": "pinjie",
		"body": [
"{reg1,reg2}"
		],
	}

	//1 assign
	"assign":{
		"prefix": "assign",
		"body": [
"assign"
		],
	}




	//1 shixu2
	"shixu2":{
		"prefix": "shixu2",
		"body": [
"always  @(posedge clk or negedge rst_n)begin"
"	if(rst_n==1'b0)begin"
"	end"
"	else if()begin"
"	end"
"	else if()begin"
"	end"
"end"
		],
	}



    //zuhe
	"zuhe":{
		"prefix": "zuhe",
		"body": [
"always  @(*)begin"
"end"
		],
	}


    //zhuangtaiji
	"zhuangtaiji":{
		"prefix": "zhuangtaiji",
		"body": [
//四段式状态机
"parameter IDLE = 2'd0;"
"parameter S1 = 2'd1;"
"parameter S2 = 2'd2;"
"parameter S3 = 2'd3;"

"reg [1:0] state_c;"
"reg [1:0] state_n;"

"wire idl2s1_start;"
"wire s12s2_start;"
"wire s22s3_start;"
"                    "
"//第一段：同步时序always模块，格式化描述次态寄存器迁移到现态寄存器(不需更改）"
"always@(posedge clk or negedge rst_n)begin"
"    if(!rst_n)begin"
"        state_c <= IDLE;"
"    end"
"    else begin"
"        state_c <= state_n;"
"    end"
"end"
"                    "
"//第二段：组合逻辑always模块，描述状态转移条件判断"
"always@(*)begin"
"    case(state_c)"
"        IDLE:begin"
"            if(idl2s1_start)begin"
"                state_n = S1;"
"            end"
"            else begin"
"                state_n = state_c;"
"            end"
"        end"
"        S1:begin"
"            if(s12s2_start)begin"
"                state_n = S2;"
"            end"
"            else begin"
"                state_n = state_c;"
"            end"
"        end"
"        S2:begin"
"            if(s22s3_start)begin"
"                state_n = S3;"
"            end"
"            else begin"
"                state_n = state_c;"
"            end"
"        end"
"        default:begin"
"            state_n = IDLE;"
"        end"
"    endcase"
"end"
"                    "
"//第三段：设计转移条件"
"assign idl2s1_start  = state_c==IDLE && ;"
"assign s12s2_start = state_c==S1    && ;"
"assign s22s3_start  = state_c==S2    && ;"
"                    "
"//第四段：同步时序always模块，格式化描述寄存器输出（可有多个输出）"
"always  @(posedge clk or negedge rst_n)begin"
"    if(!rst_n)begin"
"        out1 <=1'b0      //初始化"
"    end"
"    else if(state_c==S1)begin"
"        out1 <= 1'b1;"
"    end"
"    else begin"
"        out1 <= 1'b0;"
"    end"
"end"
		],
	}



	//jishuqi
	"jishuqi":{
		"prefix": "jishuqi",
		"body": [
"wire add_cnt;"
"wire end_cnt;"
"reg [n:0] cnt;"
"                    "
"always @(posedge clk or negedge rst_n)begin"
"	if(!rst_n)begin"
"		cnt <= 0;"
"	end"
"	else if(add_cnt)begin"
"		if(end_cnt)"
"			cnt <= 0;"
"		else"
"			cnt <= cnt + 1;"
"	end"
"end"
"                    "
"assign add_cnt = ;  "     
"assign end_cnt = add_cnt && cnt== ; " 
		],
	}



	//jishuqi
	"jishuqi2":{
		"prefix": "jishuqi2",
		"body": [
"                    "
"wire add_cnt0;"
"wire end_cnt0;"
"reg [n:0] cnt0;"
"wire add_cnt1;"
"wire end_cnt1;"
"reg [n:0] cnt1;"
"                    "
"always @(posedge clk or negedge rst_n)begin"
"	if(!rst_n)begin"
"		cnt0 <= 0;"
"	end"
"	else if(add_cnt0)begin"
"		if(end_cnt0)"
"			cnt0 <= 0;"
"		else"
"			cnt0 <= cnt0 + 1;"
"	end"
"end"
"                    "
"assign add_cnt0 = ;"
"assign end_cnt0 = add_cnt0 && cnt0== ;"
"                    "
"always @(posedge clk or negedge rst_n)begin "
"	if(!rst_n)begin"
"		cnt1 <= 0;"
"	end"
"	else if(add_cnt1)begin"
"		if(end_cnt1)"
"			cnt1 <= 0;"
"		else"
"			cnt1 <= cnt1 + 1;"
"	end"
"end"
"                    "
"assign add_cnt1 = end_cnt0;"
"assign end_cnt1 = add_cnt1 && cnt1== ;"
		],
	}




    //Module
	"Module":{
		"prefix": "Module",
		"body": [
"module module_name("
"clk    ,"
"rst_n  ,"
"//其他信号,举例dout"
"dout"
");"
"                    "
"//参数定义"
"parameter      DATA_W =         8;"
"                    "
"//输入信号定义"
"input               clk    ;"
"input               rst_n  ;"
"                    "
"//输出信号定义"
"output[DATA_W-1:0]  dout   ;"
"                    "
"//输出信号reg定义"
"reg   [DATA_W-1:0]  dout   ;"
"                    "
"//中间信号定义"
"reg                 signal1;"
"                    "
"                    "
"                    "
"endmodule"
		],
	}


    //test
	"test":{
		"prefix": "test",
		"body": [
"`timescale 1 ns/1 ns"
"                    "
"module testbench_name();"
"                    "
"//时钟和复位"
"reg clk  ;"
"reg rst_n;"
"                    "
"//uut的输入信号"
"reg[3:0]  din0  ;"
"reg       din1  ;"
"                    "
"                    "
"//uut的输出信号"
"wire      dout0;"
"wire[4:0] dout1;"
"                    "
"                    "
"//时钟周期，单位为ns，可在此修改时钟周期。"
"parameter CYCLE    = 20;"
"                    "
"//复位时间，此时表示复位3个时钟周期的时间。"
"parameter RST_TIME = 3 ;"
"                    "
"//待测试的模块例化"
"module_name uut("
"	.clk          (clk     ), "
"	.rst_n        (rst_n   ),"
"	.din0         (din0    ),"
"	.din1         (din1    ),"
"	.dout0        (dout0   ),"
"	.dout1        (dout1   )"
"                          "
");"
"                    "
"                    "
"//生成本地时钟50M"
"initial begin"
"	clk = 0;"
"	forever"
"	#(CYCLE/2)"
"	clk=~clk;"
"end"
"                    "
"//产生复位信号"
"initial begin"
"	rst_n = 1;"
"	#2;"
"	rst_n = 0;"
"	#(CYCLE*RST_TIME);"
"	rst_n = 1;"
"end"
"                    "
"//输入信号din0赋值方式"
"initial begin"
"	#1;"
"	//赋初值"
"	din0 = 0;"
"	#(10*CYCLE);"
"	//开始赋值"
"                    "
"end"
"                    "
"//输入信号din1赋值方式"
"initial begin"
"	#1;"
"	//赋初值"
"	din1 = 0;"
"	#(10*CYCLE);"
"	//开始赋值"
"                    "
"end"
"                    "
"                    "
"                    "
"endmodule"
		],
	}

   //mokuaidiaoyong
   "mokuai":{
	"prefix": "mokuai",
	"body": [
"	module_name uut("
"	.clk          (clk     ), "
"	.rst_n        (rst_n   ),"
"	.din0         (din0    ),"
"	.din1         (din1    ),"
"	.dout0        (dout0   ),"
"	.dout1        (dout1   )"
"                        "							  
"	);"
	],
}


//function_g
"function_g":{
	"prefix": "function_g",
	"body": [
"	function [3:0] name;"
"	input [3:0] data_in; //shu ru"
"	reg [3:0] tmp;"
"	integer  i;"
"	   begin   "                      
"			for(i = 0; i <4; i=i+1)"
"				begin"
"					tmp[i] = data_in[3 - i];"
"				end"
"			name =tmp;"
"	   end"
"                  "	   
"	endfunction"
	],
}

//function_g
"function_b":{
	"prefix": "function_b",
	"body": [
"	function [3:0] name;"
"	input [3:0] data_in; //shu ru"
"	reg [3:0] tmp;"
"	   begin"
"		  tmp[0] = data_in[3];"
"		  tmp[1] = data_in[2];"
"		  tmp[2] = data_in[1];"
"		  tmp[3] = data_in[0];"
"		   name = tmp;"
"	   end"
"                  "		   
"	endfunction"
	],
}



}
